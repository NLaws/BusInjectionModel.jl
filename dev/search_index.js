var documenterSearchIndex = {"docs":
[{"location":"multi_phase_models/#Multiphase-Models","page":"Multiphase Models","title":"Multiphase Models","text":"","category":"section"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"BusInjectionModel.jl provides methods to build many different variations of the Branch Flow Model, including single phase and multiphase models. Each of the multihpase model types supported are documented below.","category":"page"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"Pages = [\"multi_phase_models.md\"]\nDepth = 2","category":"page"},{"location":"multi_phase_models/#Unrelaxed-models","page":"Multiphase Models","title":"Unrelaxed models","text":"","category":"section"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"The Unrelaxed multiphase model is built by passing a JuMP.Model, Network{MultiPhase}, and the Unrelaxed type to build_bim_rectangular!.","category":"page"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"net = CommonOPF.Network_IEEE13()\nm = JuMP.Model()\n\nbuild_bim_rectangular!(m, net, Unrelaxed)\nprintln(\"Variable information:\")\nCommonOPF.print_var_info(net)\nprintln(\"Constraint information:\")\nCommonOPF.print_constraint_info(net)","category":"page"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"The math underlying the model is as follows:","category":"page"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"boldsymbol s_j^Phi_j = sum_k j sim k textdiag left(  \n    boldsymbol v_j^Phi_jk left boldsymbol v_j^Phi_jk - boldsymbol v_k^Phi_jk  right^H boldsymbol Y_jk^H\nright)\nquad forall j in mathcalN","category":"page"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"For the nomenclature see TODO.","category":"page"},{"location":"multi_phase_models/#FixedPointLinear-models","page":"Multiphase Models","title":"FixedPointLinear models","text":"","category":"section"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"The FixedPointLinear multiphase model is built by passing a JuMP.Model, Network{MultiPhase}, and the FixedPointLinear type to build_bim_rectangular!.","category":"page"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"net = CommonOPF.Network_IEEE13()\nm = JuMP.Model()\n\nbuild_bim_rectangular!(m, net, FixedPointLinear)\nprintln(\"Variable information:\")\nCommonOPF.print_var_info(net)\nprintln(\"Constraint information:\")\nCommonOPF.print_constraint_info(net)","category":"page"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"The math underlying the model is as follows:","category":"page"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"boldsymbol v = -boldsymbol Y_LL^-1 Y_L0 boldsymbol v_0 + Y_LL^-1 textdiag(boldsymbol v_FP^*)^-1 boldsymbol s^*","category":"page"},{"location":"multi_phase_models/","page":"Multiphase Models","title":"Multiphase Models","text":"For the nomenclature see TODO.","category":"page"},{"location":"methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"Pages = [\"single_phase_models.md\"]\nDepth = 2","category":"page"},{"location":"methods/#Model-builders","page":"Methods","title":"Model builders","text":"","category":"section"},{"location":"methods/#BusInjectionModel.build_bim_rectangular!","page":"Methods","title":"BusInjectionModel.build_bim_rectangular!","text":"build_bim_rectangular!(m::JuMP.AbstractModel, net::Network, mtype::ModelType=Unrelaxed)\n\nTop-level model builder that dispatches the ModelType enum\n\n\n\n\n\nbuild_bim_rectangular!(m::JuMP.AbstractModel, net::Network{SinglePhase}, ::Val{Unrelaxed})\n\nModel builder for single-phase, unrelaxed BIM with rectangular voltage variables. See the      Single Phase Bus Injection Model (Unrelaxed) math for details.\n\nAdds the variables:\n\nm[:v] with complex values for all busses in CommonOPF.busses(net)\nm[:s0] for the complex slack bus power injection\n\n\n\n\n\nbuild_bim_rectangular!(m::JuMP.AbstractModel, net::Network{MultiPhase}, ::Val{Unrelaxed})\n\nModel builder for multi-phase, unrelaxed BIM with rectangular voltage variables. See the      Multi-Phase Bus Injection Model (Unrelaxed) math for details.\n\nAdds the variables:\n\nm[:v] with complex values for all busses in CommonOPF.busses(net)\nm[:s0] for the complex slack bus power injection\n\n\n\n\n\nbuild_bim_rectangular!(m::JuMP.Model, net::Network, ::Val{FixedPointLinear})\n\nBuild the fixed point linear model.\n\n\n\n\n\n","category":"function"},{"location":"methods/#BusInjectionModel.build_bim_polar!","page":"Methods","title":"BusInjectionModel.build_bim_polar!","text":"build_bim_polar!(m::JuMP.AbstractModel, net::Network{SinglePhase}, ::Val{DC})\n\nBuild the classic DC OPF model. \n\nVariables:\n\npj net bus power injection variable\np_gen all generators are given real power injection decision variables at their busses.\nv_ang voltage angle at all busses\n\n\n\n\n\nbuild_bim_polar!(m::JuMP.AbstractModel, net::Network, mtype::ModelType=Unrelaxed)\n\nTop-level model builder that dispatches the ModelType enum\n\n\n\n\n\nbuild_bim_polar!(m::JuMP.AbstractModel, net::Network{SinglePhase}, ::Val{Unrelaxed})\n\nModel builder for single-phase, unrelaxed BIM with polar voltage variables. See the      Single Phase Bus Injection Model (Unrelaxed) math for details.\n\nAdds the variables:\n\nm[:v_mag] for all busses in CommonOPF.busses(net)\nm[:v_ang] for all busses in CommonOPF.busses(net)\nm[:pj] and m[:qj] for the bus power injections\nm[:q_gen] for any P-V busses (via the CommonOPF.Generator)\n\n\n\n\n\n","category":"function"},{"location":"methods/#BusInjectionModel.add_or_update_fixed_point_constraint","page":"Methods","title":"BusInjectionModel.add_or_update_fixed_point_constraint","text":" add_or_update_fixed_point_constraint(\n    m::JuMP.Model, \n    net::Network, \n    v_fp::Matrix{ComplexF64},\n)\n\nApply the fixed point voltage constraint to the model m. If :fixed_point_con in keys(m.obj_dict) then the existing constraints are deleted first.\n\n\n\n\n\n","category":"function"},{"location":"methods/#BusInjectionModel.add_complex_terminal_power_variable","page":"Methods","title":"BusInjectionModel.add_complex_terminal_power_variable","text":"add_complex_terminal_power_variable(\n    m::JuMP.Model, \n    net::Network, \n    trmnls::Vector{CommonOPF.BusTerminal},\n)\n\nAdd an :s variable to the model. If the net.bounds for s missing the default bounds are zero (to keep the model bounded).\n\n\n\n\n\n","category":"function"},{"location":"methods/#BusInjectionModel.add_complex_terminal_voltage_variable","page":"Methods","title":"BusInjectionModel.add_complex_terminal_voltage_variable","text":"add_complex_terminal_voltage_variable(\n    m::JuMP.Model, \n    net::Network, \n    trmnls::Vector{CommonOPF.BusTerminal},\n)\n\nAdd a variable with symbol :v for the complex voltage indexed on trmnls and 1:net.Ntimesteps\n\n\n\n\n\n","category":"function"},{"location":"math/#Single-Phase-Bus-Injection-Model-(Unrelaxed)","page":"Math","title":"Single Phase Bus Injection Model (Unrelaxed)","text":"","category":"section"},{"location":"math/#Rectangular-voltage-variables","page":"Math","title":"Rectangular voltage variables","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"Notation:","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"s_j net complex power injection at node j\nmathcalN set of all nodes in network\nv_j voltage at node j","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"beginaligned\ns_j = sum_k j sim k Yjk^* ( v_j^2 - v_j v_k^*)  forall j in mathcalN \nv_textsubstation bus = v_0\nendaligned","category":"page"},{"location":"math/#Polar-voltage-variables","page":"Math","title":"Polar voltage variables","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"Notation:","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"G_ij real entry of admittance matrix at row i, column j\nB_ij imaginary entry of admittance matrix at row i, column j\nv_j voltage magnitude at bus j\nangle v_j voltage angle at bus j\np_j real power injection at bus j\nq_j reactive power injection at bus j","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"beginaligned\np_j =  v_j sum_i in 1dotsmathcalN v_i left\n     G_ij cos(angle v_j - angle v_i) + B_ij sin(angle v_j - angle v_i)\n     right  \nq_j =  v_j sum_i in 1dotsmathcalN v_i left\n     G_ij sin(angle v_j - angle v_i) - B_ij cos(angle v_j - angle v_i)\n     right  \nv_textsubstation bus = v_0 \nangle v_textsubstation bus = 0\nendaligned","category":"page"},{"location":"math/#Multi-Phase-Bus-Injection-Model-(Unrelaxed)","page":"Math","title":"Multi-Phase Bus Injection Model (Unrelaxed)","text":"","category":"section"},{"location":"math/#Rectangular-voltage-variables-2","page":"Math","title":"Rectangular voltage variables","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"Notation:","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"boldsymbol s_j net complex power injection at bus j, vector of phases\nPhi_j phases connected to bus j (take sub-set of vector)\nboldsymbol v_j^Phi_jk complex voltage vector at bus j for the phases connected to bus k\nk j sim k set of busses connected to bus j\nH conjugate transpose\nboldsymbol Y_jk^H phase admittance matrix for busses j and k","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"beginaligned\nboldsymbol s_j^Phi_j = sum_k j sim k textdiag left(  \n     boldsymbol v_j^Phi_jk left boldsymbol v_j^Phi_jk - boldsymbol v_k^Phi_jk  right^H boldsymbol Y_jk^H\nright)\nquad forall j in mathcalN\nendaligned","category":"page"},{"location":"#BusInjectionModel.jl","page":"User Documentation","title":"BusInjectionModel.jl","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Documentation for BusInjectionModel.jl","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"A work-in-progress package for optimal power flow (OPF) models based on the bus injection model.","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"This package is part of a federation of packages to support OPF modeling:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"CommonOPF provides the basis for BusInjectionModel.jl and:\nBranchFlowModel, which provides a similar interface to BusInjectionModel.jl.","category":"page"},{"location":"#Inputs","page":"User Documentation","title":"Inputs","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Inputs are defined using CommonOPF.Network structs. ","category":"page"},{"location":"#Building-a-Model","page":"User Documentation","title":"Building a Model","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Building a BranchFlBusInjectionModelowModel requires three things:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"a JuMP Model,\na CommonOPF.Network, and\nthe type of model to be built, i.e. one of the BusInjectionModel.ModelType","category":"page"},{"location":"#BusInjectionModel.ModelType","page":"User Documentation","title":"BusInjectionModel.ModelType","text":"ModelType\n\nAn enum with values:\n\nFixedPointLinear\nUnrelaxed\nDC (single phase polar only)\n\n\n\n\n\n","category":"type"},{"location":"","page":"User Documentation","title":"User Documentation","text":"To build a model see build_bim_rectangular! and build_bim_polar!","category":"page"},{"location":"single_phase_models/#Single-Phase-Models","page":"Single Phase Models","title":"Single Phase Models","text":"","category":"section"},{"location":"single_phase_models/","page":"Single Phase Models","title":"Single Phase Models","text":"BusInjectionModel.jl provides methods to build many different variations of the Branch Flow Model, including single phase and multiphase models. Each of the single phase model types supported are documented below.","category":"page"},{"location":"single_phase_models/","page":"Single Phase Models","title":"Single Phase Models","text":"Pages = [\"single_phase_models.md\"]\nDepth = 3","category":"page"},{"location":"single_phase_models/#Unrelaxed-models","page":"Single Phase Models","title":"Unrelaxed models","text":"","category":"section"},{"location":"single_phase_models/","page":"Single Phase Models","title":"Single Phase Models","text":"The Unrelaxed multiphase model is built by passing a JuMP.Model, Network{SinglePhase}, and the Unrelaxed type to build_bim_rectangular! or build_bim_polar!.","category":"page"},{"location":"single_phase_models/#Rectangular-Voltage","page":"Single Phase Models","title":"Rectangular Voltage","text":"","category":"section"},{"location":"single_phase_models/","page":"Single Phase Models","title":"Single Phase Models","text":"net = CommonOPF.Network_IEEE13_SinglePhase()\nm = JuMP.Model()\n\nbuild_bim_rectangular!(m, net, Unrelaxed)\nprintln(\"Variable information:\")\nCommonOPF.print_var_info(net)\nprintln(\"Constraint information:\")\nCommonOPF.print_constraint_info(net)","category":"page"},{"location":"single_phase_models/","page":"Single Phase Models","title":"Single Phase Models","text":"The math underlying the model is as follows:","category":"page"},{"location":"single_phase_models/","page":"Single Phase Models","title":"Single Phase Models","text":"s_j = sum_k j sim k Y_jk^* left( v_j^2 - v_j v_k^* right)\nquad forall j in mathcalN","category":"page"},{"location":"single_phase_models/","page":"Single Phase Models","title":"Single Phase Models","text":"For the nomenclature see TODO.","category":"page"},{"location":"single_phase_models/#Polar-Voltage","page":"Single Phase Models","title":"Polar Voltage","text":"","category":"section"},{"location":"single_phase_models/","page":"Single Phase Models","title":"Single Phase Models","text":"net = CommonOPF.Network_IEEE13_SinglePhase()\nm = JuMP.Model()\n\nbuild_bim_polar!(m, net, Unrelaxed)\nprintln(\"Variable information:\")\nCommonOPF.print_var_info(net)\nprintln(\"Constraint information:\")\nCommonOPF.print_constraint_info(net)","category":"page"},{"location":"single_phase_models/","page":"Single Phase Models","title":"Single Phase Models","text":"The math underlying the model is as follows:","category":"page"},{"location":"single_phase_models/","page":"Single Phase Models","title":"Single Phase Models","text":"beginaligned\np_j =  v_j sum_i in 1dotsmathcalN v_i left\n    G_leftijright cos(angle v_j - angle v_i) + B_leftijright sin(angle v_j - angle v_i)\n    right\n    quad forall j in mathcalN\n\nq_j =  v_j sum_i in 1dotsmathcalN v_i left\n    G_leftijright sin(angle v_j - angle v_i) - B_leftijright cos(angle v_j - angle v_i)\n    right\n    quad forall j in mathcalN\n\nv_textsubstation bus = v_0 \n\nangle v_textsubstation bus = 0\nendaligned","category":"page"}]
}
