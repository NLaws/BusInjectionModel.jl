var documenterSearchIndex = {"docs":
[{"location":"methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"build_bim_rectangular!\nbuild_bim_polar!","category":"page"},{"location":"methods/#BusInjectionModel.build_bim_rectangular!","page":"Methods","title":"BusInjectionModel.build_bim_rectangular!","text":"build_bim_rectangular!(m::JuMP.AbstractModel, net::Network, mtype::ModelType=Unrelaxed)\n\nTop-level model builder that dispatches the ModelType enum\n\n\n\n\n\nbuild_bim_rectangular!(m::JuMP.AbstractModel, net::Network{SinglePhase}, ::Val{Unrelaxed})\n\nModel builder for single-phase, unrelaxed BIM with rectangular voltage variables. See the      Single Phase Bus Injection Model (Unrelaxed) math for details.\n\nAdds the variables:\n\nm[:v] with complex values for all busses in CommonOPF.busses(net)\nm[:s0] for the complex slack bus power injection\n\n\n\n\n\n","category":"function"},{"location":"methods/#BusInjectionModel.build_bim_polar!","page":"Methods","title":"BusInjectionModel.build_bim_polar!","text":"build_bim_polar!(m::JuMP.AbstractModel, net::Network, mtype::ModelType=Unrelaxed)\n\nTop-level model builder that dispatches the ModelType enum\n\n\n\n\n\nbuild_bim_polar!(m::JuMP.AbstractModel, net::Network{SinglePhase}, ::Val{Unrelaxed})\n\nModel builder for single-phase, unrelaxed BIM with polar voltage variables. See the      Single Phase Bus Injection Model (Unrelaxed) math for details.\n\nAdds the variables:\n\nm[:v_mag] for all busses in CommonOPF.busses(net)\nm[:v_ang] for all busses in CommonOPF.busses(net)\nm[:p0] and m[:q0] for the slack bus power injection\nm[:q_gen] for any P-V busses (via the CommonOPF.Generator)\n\n\n\n\n\n","category":"function"},{"location":"math/#Single-Phase-Bus-Injection-Model-(Unrelaxed)","page":"Math","title":"Single Phase Bus Injection Model (Unrelaxed)","text":"","category":"section"},{"location":"math/#Rectangular-voltage-variables","page":"Math","title":"Rectangular voltage variables","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"Notation:","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"s_j net complex power injection at node j\nmathcalN set of all nodes in network\nv_j voltage at node j","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"beginaligned\ns_j = sum_k j sim k Yjk^* ( v_j^2 - v_j v_k^*)  forall j in mathcalN \nv_textsubstation bus = v_0\nendaligned","category":"page"},{"location":"math/#Polar-voltage-variables","page":"Math","title":"Polar voltage variables","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"Notation:","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"G_ij real entry of admittance matrix at row i, column j\nB_ij imaginary entry of admittance matrix at row i, column j\nv_j voltage magnitude at bus j\nangle v_j voltage angle at bus j\np_j real power injection at bus j\nq_j reactive power injection at bus j","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"beginaligned\np_j =  v_j sum_i in 1dotsmathcalN v_i left\n     G_ij cos(angle v_j - angle v_i) + B_ij sin(angle v_j - angle v_i)\n     right  \nq_j =  v_j sum_i in 1dotsmathcalN v_i left\n     G_ij sin(angle v_j - angle v_i) - B_ij cos(angle v_j - angle v_i)\n     right  \nv_textsubstation bus = v_0 \nangle v_textsubstation bus = 0\nendaligned","category":"page"},{"location":"#BusInjectionModel.jl","page":"User Documentation","title":"BusInjectionModel.jl","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Documentation for BusInjectionModel.jl","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"A work-in-progress package for optimal power flow (OPF) models based on the bus injection model.","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"This package is part of a federation of packages to support OPF modeling:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"CommonOPF provides the basis for BusInjectionModel.jl and:\nBranchFlowModel, which provides a similar interface to BusInjectionModel.jl.","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"using BusInjectionModel\nusing CommonOPF\nusing JuMP\nusing Ipopt\n\nm = JuMP.Model(Ipopt.Optimizer)\nnet = CommonOPF.Network(\"path/to/network/yaml-or-opendss-file\")\nBusInjectionModel.build_bim_rectangular!(m, net, Unrelaxed)\n# set objective\noptimize!(m)","category":"page"}]
}
